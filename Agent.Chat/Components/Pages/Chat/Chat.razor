@page "/chat"
@using System.ComponentModel
@using Microsoft.SemanticKernel.ChatCompletion
@using ModelContextProtocol.Client
@using ModelContextProtocol.Protocol.Transport
@using Agent.Api.Models
@using Agent.Api.Infrastructure.Entities
@using Agent.Api.Interfaces;
@inject IConversationService conversationService
@inject IMessagesService messagesService
@inject IChatClient ChatClient
@inject NavigationManager Nav
@inject SemanticSearch Search
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>Chat</PageTitle>


<div class="wrapper">
    <div class="history main-background-gradient">
        <div>
            <h3 class="title">BQ</h3>
            <p class="title-3">Lịch sử trò chuyện</p>
            <hr />
            <ul class="conversations">
                @foreach (var conversation in conversations)
                {
                    <li class="conversations-item" @onclick="@(() => SelectedConversation(conversation))">
                        <div class="conversations-item-link">
                            <p class="conversations-item-name">@conversation.Name</p>
                        </div>
                    </li>
                }
            </ul>
        </div>
    </div>
    @if (currentConversation == null)
    {
        <div class="messages">
            <h3 class="title">BQ Agent</h3>
            <div class="no-conversation">
                <div>
                    <input type="text" placeholder="Tên cuộc trò chuyện..." @bind="@conversationName" />
                    <button @onclick="CreateConversation" class="btn-subtle">Tạo cuộc trò chuyện mới</button>
                    <p style="font-size: 14px; margin: 0 10px;">Hoặc</p>
                    <p style="margin: 0;" class="title-3">Chọn 1 cuộc trò chuyện có sẵn</p>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="messages">
            @* <ChatHeader OnNewChat="@ResetConversationAsync" /> *@
            <h3 class="title">BQ Agent</h3>
            <ChatMessageList Messages="@messages" InProgressMessage="@currentResponseMessage">
                <NoMessagesContent>
                    @* <ChatCitation File="Example_Emergency_Survival_Kit.pdf" />
        <ChatCitation File="Example_GPS_Watch.pdf" /> *@
                </NoMessagesContent>
            </ChatMessageList>

            <div class="chat-container">
                <ChatSuggestions OnSelected="@AddUserMessageAsync" @ref="@chatSuggestions" />
                <ChatInput OnSend="@AddUserMessageAsync" @ref="@chatInput" />
            </div>
        </div>

    }

</div>


@code {
    private const string SystemPrompt = @"
        You are an assistant who answers questions about information you retrieve.

        Use tools you have to find relevant information.
        ";

    private readonly ChatOptions chatOptions = new();
    private CancellationTokenSource? currentResponseCancellation;
    private ChatMessage? currentResponseMessage;
    private ChatInput? chatInput;
    private ChatSuggestions? chatSuggestions;
    private IMcpClient? McpClient;
    private readonly List<ChatMessage> messages = new();


    private Conversation? currentConversation;
    private List<Conversation> conversations = new();
    private string conversationName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        McpClient = await McpClientFactory.CreateAsync(
            clientTransport: new SseClientTransport(new SseClientTransportOptions()
            {
                Endpoint = new Uri("http://localhost:5104/sse"),
            }));

        var tools = await McpClient.ListToolsAsync();

        chatOptions.Tools = [.. tools];
        conversations = await GetConversationsAsync();
        messages.Add(new(ChatRole.System, SystemPrompt));
        await base.OnInitializedAsync();
    }


    private async Task<List<Conversation>> GetConversationsAsync()
    {
        var userId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userId");
        if (string.IsNullOrEmpty(userId))
            return new();
        Guid parseToGuid = Guid.Parse(userId);
        var conversations = await conversationService.GetConversationsByUserId(parseToGuid);
        return conversations;
    }

    private async Task GetMessagesByConversationId(Guid conversationId)
    {
        var res = await messagesService.GetMessagesByConversationId(conversationId);
        foreach (var message in res)
        {
            if (message.Role == ChatRole.User.Value)
                messages.Add(new ChatMessage(ChatRole.User, message.Content));
            else if (message.Role == ChatRole.Assistant.Value)
                messages.Add(new ChatMessage(ChatRole.Assistant, message.Content));
        }
    }

    private async Task SelectedConversation(Conversation item)
    {
        var result = await GetConversationById(item);
        if (result == null) return;
        currentConversation = result;
        await GetMessagesByConversationId(currentConversation.Id);
    }



    private async Task CreateConversation()
    {
        if (string.IsNullOrEmpty(conversationName)) return;
        var userId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userId");
        if (string.IsNullOrEmpty(userId)) return;
        Guid parseToGuid = Guid.Parse(userId);
        var conversation = new CreateConversationRequest()
        {
            Name = conversationName,
            CreatedById = parseToGuid,
            IsGroup = false,
        };
        var result = await conversationService.CreateConversationAsync(conversation);
        if (result == null) return;
        currentConversation = result;
    }

    private async Task CreateMessage(ChatMessage message)
    {
        if (currentConversation == null) return;
        var userId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userId");
        if (string.IsNullOrEmpty(userId)) return;
        Guid parseToGuid = Guid.Parse(userId);
        var body = new MessageRequest()
        { 
            Content = message.Text,
            ConversationId = currentConversation.Id,
            Role = message.Role,
            SenderId = parseToGuid,
             
        };
        await messagesService.CreateMessageAsync(body);

    }


    private async Task<Conversation?> GetConversationById(Conversation item)
    {
        if (item == null) return null;
        var conversation = await conversationService.GetConversationById(item.Id);
        return conversation;
    }

    private async Task AddUserMessageAsync(ChatMessage userMessage)
    {
        CancelAnyCurrentResponse();

        // Add the user message to the conversation
        messages.Add(userMessage);
        chatSuggestions?.Clear();
        await chatInput!.FocusAsync();

        // Stream and display a new response from the IChatClient
        var responseText = new Microsoft.Extensions.AI.TextContent(""); // Specify the namespace explicitly
        currentResponseMessage = new ChatMessage(ChatRole.Assistant, [responseText]);
        currentResponseCancellation = new();
        await foreach (var update in ChatClient.GetStreamingResponseAsync([.. messages], chatOptions, currentResponseCancellation.Token))
        {
            messages.AddMessages(update, filter: c => c is not Microsoft.Extensions.AI.TextContent); // Specify the namespace explicitly
            responseText.Text += update.Text;
            ChatMessageItem.NotifyChanged(currentResponseMessage);
        }
        await CreateMessage(userMessage);
        await CreateMessage(currentResponseMessage);
        // Store the final response in the conversation, and begin getting suggestions
        messages.Add(currentResponseMessage!);
        currentResponseMessage = null;
        chatSuggestions?.Update(messages);
    }
    private void CancelAnyCurrentResponse()
    {
        // If a response was cancelled while streaming, include it in the conversation so it's not lost
        if (currentResponseMessage is not null)
        {
            messages.Add(currentResponseMessage);
        }

        currentResponseCancellation?.Cancel();
        currentResponseMessage = null;
    }

    private async Task ResetConversationAsync()
    {
        CancelAnyCurrentResponse();
        messages.Clear();
        messages.Add(new(ChatRole.System, SystemPrompt));
        chatSuggestions?.Clear();
        await chatInput!.FocusAsync();
    }

    [Description("Searches for information using a phrase or keyword")]
    private async Task<IEnumerable<string>> SearchAsync(
        [Description("The phrase to search for.")] string searchPhrase,
        [Description("If possible, specify the filename to search that file only. If not provided or empty, the search includes all files.")] string? filenameFilter = null)
    {
        await InvokeAsync(StateHasChanged);
        var results = await Search.SearchAsync(searchPhrase, filenameFilter, maxResults: 5);
        return results.Select(result =>
            $"<result filename=\"{result.FileName}\" page_number=\"{result.PageNumber}\">{result.Text}</result>");
    }

    public void Dispose()
    {
        McpClient?.DisposeAsync().ConfigureAwait(false).GetAwaiter().GetResult();
        currentResponseCancellation?.Cancel();
    }
}
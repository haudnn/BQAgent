@page "/register"
@using Agent.Api.Models
@using Agent.Api.Infrastructure.Entities
@using Agent.Api.Interfaces;
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IIdentityService identityService


<div class="container">
    <div class="">
        <div>
            <h3>Register</h3>
        </div>
        <div class="">
            <EditForm Model="@registerRequest" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="employeeCode" class="form-label">Mã nhân viên</label>
                    <InputText id="employeeCode" class="form-control input-auth" @bind-Value="registerRequest.EmployeeCode" />
                    <ValidationMessage For="@(() => registerRequest.EmployeeCode)" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Mật khẩu</label>
                    <InputText id="password" type="password" class="form-control input-auth" @bind-Value="registerRequest.Password" />
                    <ValidationMessage For="@(() => registerRequest.Password)" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <InputText id="email" type="text" class="form-control input-auth" @bind-Value="registerRequest.Email" />
                    <ValidationMessage For="@(() => registerRequest.Email)" />
                </div>

                <div class="mb-3">
                    <label for="name" class="form-label">Tên</label>
                    <InputText id="name" type="text" class="form-control input-auth" @bind-Value="registerRequest.DisplayName" />
                    <ValidationMessage For="@(() => registerRequest.DisplayName)" />
                </div>


                <div class="d-grid">
                    <button type="submit" class="btn btn-primary" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <span>Đang xử lý...</span>
                        }
                        else
                        {
                            <span>Đăng ký</span>
                        }
                    </button>
                </div>
            </EditForm>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3">
                    @errorMessage
                </div>
            }

            <div class="mt-3 text-center">
                <a href="/register">Chưa có tài khoản? Đăng ký</a>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterRequest registerRequest = new() { EmployeeCode = "", Password = "", Email = "", DisplayName = "" };
    private string errorMessage = "";
    private bool isLoading = false;

    private async Task HandleValidSubmit()
    {
        try
        {
            isLoading = true;
            errorMessage = "";

            if (string.IsNullOrEmpty(registerRequest.EmployeeCode))
                return;
            else if (string.IsNullOrEmpty(registerRequest.Password))
                return;
            else if (string.IsNullOrEmpty(registerRequest.Email))
                return;
            else if (string.IsNullOrEmpty(registerRequest.DisplayName))
                return;
            else
            {

                var user = await identityService.Register(registerRequest);
                if (user != null)
                    NavigationManager.NavigateTo("/login");
                else
                    errorMessage = "Đăng ký không thành công. Vui lòng thử lại.";
            }

        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}